// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/28/2022 12:59:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    traffic
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module traffic_vlg_sample_tst(
	CLK,
	RST,
	SWI,
	sampler_tx
);
input  CLK;
input  RST;
input  SWI;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or RST or SWI)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module traffic_vlg_check_tst (
	LED,
	NSEGH,
	NSEGL,
	WideSEGH,
	WideSEGL,
	sampler_rx
);
input [5:0] LED;
input [3:0] NSEGH;
input [3:0] NSEGL;
input [3:0] WideSEGH;
input [3:0] WideSEGL;
input sampler_rx;

reg [5:0] LED_expected;
reg [3:0] NSEGH_expected;
reg [3:0] NSEGL_expected;
reg [3:0] WideSEGH_expected;
reg [3:0] WideSEGL_expected;

reg [5:0] LED_prev;
reg [3:0] NSEGH_prev;
reg [3:0] NSEGL_prev;
reg [3:0] WideSEGH_prev;
reg [3:0] WideSEGL_prev;

reg [5:0] LED_expected_prev;
reg [3:0] NSEGH_expected_prev;
reg [3:0] NSEGL_expected_prev;
reg [3:0] WideSEGH_expected_prev;
reg [3:0] WideSEGL_expected_prev;

reg [5:0] last_LED_exp;
reg [3:0] last_NSEGH_exp;
reg [3:0] last_NSEGL_exp;
reg [3:0] last_WideSEGH_exp;
reg [3:0] last_WideSEGL_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	LED_prev = LED;
	NSEGH_prev = NSEGH;
	NSEGL_prev = NSEGL;
	WideSEGH_prev = WideSEGH;
	WideSEGL_prev = WideSEGL;
end

// update expected /o prevs

always @(trigger)
begin
	LED_expected_prev = LED_expected;
	NSEGH_expected_prev = NSEGH_expected;
	NSEGL_expected_prev = NSEGL_expected;
	WideSEGH_expected_prev = WideSEGH_expected;
	WideSEGL_expected_prev = WideSEGL_expected;
end


// expected LED[ 5 ]
initial
begin
	LED_expected[5] = 1'bX;
end 
// expected LED[ 4 ]
initial
begin
	LED_expected[4] = 1'bX;
end 
// expected LED[ 3 ]
initial
begin
	LED_expected[3] = 1'bX;
end 
// expected LED[ 2 ]
initial
begin
	LED_expected[2] = 1'bX;
end 
// expected LED[ 1 ]
initial
begin
	LED_expected[1] = 1'bX;
end 
// expected LED[ 0 ]
initial
begin
	LED_expected[0] = 1'bX;
end 
// expected NSEGH[ 3 ]
initial
begin
	NSEGH_expected[3] = 1'bX;
end 
// expected NSEGH[ 2 ]
initial
begin
	NSEGH_expected[2] = 1'bX;
end 
// expected NSEGH[ 1 ]
initial
begin
	NSEGH_expected[1] = 1'bX;
end 
// expected NSEGH[ 0 ]
initial
begin
	NSEGH_expected[0] = 1'bX;
end 
// expected NSEGL[ 3 ]
initial
begin
	NSEGL_expected[3] = 1'bX;
end 
// expected NSEGL[ 2 ]
initial
begin
	NSEGL_expected[2] = 1'bX;
end 
// expected NSEGL[ 1 ]
initial
begin
	NSEGL_expected[1] = 1'bX;
end 
// expected NSEGL[ 0 ]
initial
begin
	NSEGL_expected[0] = 1'bX;
end 
// expected WideSEGH[ 3 ]
initial
begin
	WideSEGH_expected[3] = 1'bX;
end 
// expected WideSEGH[ 2 ]
initial
begin
	WideSEGH_expected[2] = 1'bX;
end 
// expected WideSEGH[ 1 ]
initial
begin
	WideSEGH_expected[1] = 1'bX;
end 
// expected WideSEGH[ 0 ]
initial
begin
	WideSEGH_expected[0] = 1'bX;
end 
// expected WideSEGL[ 3 ]
initial
begin
	WideSEGL_expected[3] = 1'bX;
end 
// expected WideSEGL[ 2 ]
initial
begin
	WideSEGL_expected[2] = 1'bX;
end 
// expected WideSEGL[ 1 ]
initial
begin
	WideSEGL_expected[1] = 1'bX;
end 
// expected WideSEGL[ 0 ]
initial
begin
	WideSEGL_expected[0] = 1'bX;
end 
// generate trigger
always @(LED_expected or LED or NSEGH_expected or NSEGH or NSEGL_expected or NSEGL or WideSEGH_expected or WideSEGH or WideSEGL_expected or WideSEGL)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LED = %b | expected NSEGH = %b | expected NSEGL = %b | expected WideSEGH = %b | expected WideSEGL = %b | ",LED_expected_prev,NSEGH_expected_prev,NSEGL_expected_prev,WideSEGH_expected_prev,WideSEGL_expected_prev);
	$display("| real LED = %b | real NSEGH = %b | real NSEGL = %b | real WideSEGH = %b | real WideSEGL = %b | ",LED_prev,NSEGH_prev,NSEGL_prev,WideSEGH_prev,WideSEGL_prev);
`endif
	if (
		( LED_expected_prev[0] !== 1'bx ) && ( LED_prev[0] !== LED_expected_prev[0] )
		&& ((LED_expected_prev[0] !== last_LED_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_expected_prev);
		$display ("     Real value = %b", LED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LED_exp[0] = LED_expected_prev[0];
	end
	if (
		( LED_expected_prev[1] !== 1'bx ) && ( LED_prev[1] !== LED_expected_prev[1] )
		&& ((LED_expected_prev[1] !== last_LED_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_expected_prev);
		$display ("     Real value = %b", LED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LED_exp[1] = LED_expected_prev[1];
	end
	if (
		( LED_expected_prev[2] !== 1'bx ) && ( LED_prev[2] !== LED_expected_prev[2] )
		&& ((LED_expected_prev[2] !== last_LED_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_expected_prev);
		$display ("     Real value = %b", LED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LED_exp[2] = LED_expected_prev[2];
	end
	if (
		( LED_expected_prev[3] !== 1'bx ) && ( LED_prev[3] !== LED_expected_prev[3] )
		&& ((LED_expected_prev[3] !== last_LED_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_expected_prev);
		$display ("     Real value = %b", LED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LED_exp[3] = LED_expected_prev[3];
	end
	if (
		( LED_expected_prev[4] !== 1'bx ) && ( LED_prev[4] !== LED_expected_prev[4] )
		&& ((LED_expected_prev[4] !== last_LED_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_expected_prev);
		$display ("     Real value = %b", LED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LED_exp[4] = LED_expected_prev[4];
	end
	if (
		( LED_expected_prev[5] !== 1'bx ) && ( LED_prev[5] !== LED_expected_prev[5] )
		&& ((LED_expected_prev[5] !== last_LED_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_expected_prev);
		$display ("     Real value = %b", LED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LED_exp[5] = LED_expected_prev[5];
	end
	if (
		( NSEGH_expected_prev[0] !== 1'bx ) && ( NSEGH_prev[0] !== NSEGH_expected_prev[0] )
		&& ((NSEGH_expected_prev[0] !== last_NSEGH_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NSEGH[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NSEGH_expected_prev);
		$display ("     Real value = %b", NSEGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_NSEGH_exp[0] = NSEGH_expected_prev[0];
	end
	if (
		( NSEGH_expected_prev[1] !== 1'bx ) && ( NSEGH_prev[1] !== NSEGH_expected_prev[1] )
		&& ((NSEGH_expected_prev[1] !== last_NSEGH_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NSEGH[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NSEGH_expected_prev);
		$display ("     Real value = %b", NSEGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_NSEGH_exp[1] = NSEGH_expected_prev[1];
	end
	if (
		( NSEGH_expected_prev[2] !== 1'bx ) && ( NSEGH_prev[2] !== NSEGH_expected_prev[2] )
		&& ((NSEGH_expected_prev[2] !== last_NSEGH_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NSEGH[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NSEGH_expected_prev);
		$display ("     Real value = %b", NSEGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_NSEGH_exp[2] = NSEGH_expected_prev[2];
	end
	if (
		( NSEGH_expected_prev[3] !== 1'bx ) && ( NSEGH_prev[3] !== NSEGH_expected_prev[3] )
		&& ((NSEGH_expected_prev[3] !== last_NSEGH_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NSEGH[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NSEGH_expected_prev);
		$display ("     Real value = %b", NSEGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_NSEGH_exp[3] = NSEGH_expected_prev[3];
	end
	if (
		( NSEGL_expected_prev[0] !== 1'bx ) && ( NSEGL_prev[0] !== NSEGL_expected_prev[0] )
		&& ((NSEGL_expected_prev[0] !== last_NSEGL_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NSEGL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NSEGL_expected_prev);
		$display ("     Real value = %b", NSEGL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NSEGL_exp[0] = NSEGL_expected_prev[0];
	end
	if (
		( NSEGL_expected_prev[1] !== 1'bx ) && ( NSEGL_prev[1] !== NSEGL_expected_prev[1] )
		&& ((NSEGL_expected_prev[1] !== last_NSEGL_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NSEGL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NSEGL_expected_prev);
		$display ("     Real value = %b", NSEGL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NSEGL_exp[1] = NSEGL_expected_prev[1];
	end
	if (
		( NSEGL_expected_prev[2] !== 1'bx ) && ( NSEGL_prev[2] !== NSEGL_expected_prev[2] )
		&& ((NSEGL_expected_prev[2] !== last_NSEGL_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NSEGL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NSEGL_expected_prev);
		$display ("     Real value = %b", NSEGL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NSEGL_exp[2] = NSEGL_expected_prev[2];
	end
	if (
		( NSEGL_expected_prev[3] !== 1'bx ) && ( NSEGL_prev[3] !== NSEGL_expected_prev[3] )
		&& ((NSEGL_expected_prev[3] !== last_NSEGL_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NSEGL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NSEGL_expected_prev);
		$display ("     Real value = %b", NSEGL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NSEGL_exp[3] = NSEGL_expected_prev[3];
	end
	if (
		( WideSEGH_expected_prev[0] !== 1'bx ) && ( WideSEGH_prev[0] !== WideSEGH_expected_prev[0] )
		&& ((WideSEGH_expected_prev[0] !== last_WideSEGH_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WideSEGH[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WideSEGH_expected_prev);
		$display ("     Real value = %b", WideSEGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_WideSEGH_exp[0] = WideSEGH_expected_prev[0];
	end
	if (
		( WideSEGH_expected_prev[1] !== 1'bx ) && ( WideSEGH_prev[1] !== WideSEGH_expected_prev[1] )
		&& ((WideSEGH_expected_prev[1] !== last_WideSEGH_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WideSEGH[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WideSEGH_expected_prev);
		$display ("     Real value = %b", WideSEGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_WideSEGH_exp[1] = WideSEGH_expected_prev[1];
	end
	if (
		( WideSEGH_expected_prev[2] !== 1'bx ) && ( WideSEGH_prev[2] !== WideSEGH_expected_prev[2] )
		&& ((WideSEGH_expected_prev[2] !== last_WideSEGH_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WideSEGH[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WideSEGH_expected_prev);
		$display ("     Real value = %b", WideSEGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_WideSEGH_exp[2] = WideSEGH_expected_prev[2];
	end
	if (
		( WideSEGH_expected_prev[3] !== 1'bx ) && ( WideSEGH_prev[3] !== WideSEGH_expected_prev[3] )
		&& ((WideSEGH_expected_prev[3] !== last_WideSEGH_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WideSEGH[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WideSEGH_expected_prev);
		$display ("     Real value = %b", WideSEGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_WideSEGH_exp[3] = WideSEGH_expected_prev[3];
	end
	if (
		( WideSEGL_expected_prev[0] !== 1'bx ) && ( WideSEGL_prev[0] !== WideSEGL_expected_prev[0] )
		&& ((WideSEGL_expected_prev[0] !== last_WideSEGL_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WideSEGL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WideSEGL_expected_prev);
		$display ("     Real value = %b", WideSEGL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WideSEGL_exp[0] = WideSEGL_expected_prev[0];
	end
	if (
		( WideSEGL_expected_prev[1] !== 1'bx ) && ( WideSEGL_prev[1] !== WideSEGL_expected_prev[1] )
		&& ((WideSEGL_expected_prev[1] !== last_WideSEGL_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WideSEGL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WideSEGL_expected_prev);
		$display ("     Real value = %b", WideSEGL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WideSEGL_exp[1] = WideSEGL_expected_prev[1];
	end
	if (
		( WideSEGL_expected_prev[2] !== 1'bx ) && ( WideSEGL_prev[2] !== WideSEGL_expected_prev[2] )
		&& ((WideSEGL_expected_prev[2] !== last_WideSEGL_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WideSEGL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WideSEGL_expected_prev);
		$display ("     Real value = %b", WideSEGL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WideSEGL_exp[2] = WideSEGL_expected_prev[2];
	end
	if (
		( WideSEGL_expected_prev[3] !== 1'bx ) && ( WideSEGL_prev[3] !== WideSEGL_expected_prev[3] )
		&& ((WideSEGL_expected_prev[3] !== last_WideSEGL_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WideSEGL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WideSEGL_expected_prev);
		$display ("     Real value = %b", WideSEGL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WideSEGL_exp[3] = WideSEGL_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module traffic_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg RST;
reg SWI;
// wires                                               
wire [5:0] LED;
wire [3:0] NSEGH;
wire [3:0] NSEGL;
wire [3:0] WideSEGH;
wire [3:0] WideSEGL;

wire sampler;                             

// assign statements (if any)                          
traffic i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.LED(LED),
	.NSEGH(NSEGH),
	.NSEGL(NSEGL),
	.RST(RST),
	.SWI(SWI),
	.WideSEGH(WideSEGH),
	.WideSEGL(WideSEGL)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #500 1'b1;
	#500;
end 

// RST
initial
begin
	RST = 1'b0;
end 

// SWI
initial
begin
	SWI = 1'b0;
end 

traffic_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.RST(RST),
	.SWI(SWI),
	.sampler_tx(sampler)
);

traffic_vlg_check_tst tb_out(
	.LED(LED),
	.NSEGH(NSEGH),
	.NSEGL(NSEGL),
	.WideSEGH(WideSEGH),
	.WideSEGL(WideSEGL),
	.sampler_rx(sampler)
);
endmodule

